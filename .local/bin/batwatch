#!/usr/bin/env bash
BAT=bat
DOCS_URL=https://github.com/eth-p/bat-extras/blob/master/doc
PROGRAM="$(basename "$0" .sh)"
SHIFTOPT_HOOKS=()
setargs(){
_ARGV=("$@")
_ARGV_LAST="$((${#_ARGV[@]}-1))"
_ARGV_INDEX=0
}
shiftopt(){
[[ $_ARGV_INDEX -gt $_ARGV_LAST ]]&&return 1
OPT="${_ARGV[$_ARGV_INDEX]}"
unset OPT_VAL
if [[ $OPT =~ ^--[a-zA-Z0-9_-]+=.* ]];then
OPT_VAL="${OPT#*=}"
OPT="${OPT%%=*}"
fi
((_ARGV_INDEX++))
local hook
for hook in "${SHIFTOPT_HOOKS[@]}";do
if "$hook";then
shiftopt
return $?
fi
done
return 0
}
shiftval(){
if [[ -n ${OPT_VAL+x} ]];then
return 0
fi
OPT_VAL="${_ARGV[$_ARGV_INDEX]}"
((_ARGV_INDEX++))
if [[ $OPT_VAL =~ -.* ]];then
printc "%{RED}%s: '%s' requires a value%{CLEAR}\n" "$PROGRAM" "$ARG"
exit 1
fi
}
setargs "$@"
hook_color(){
SHIFTOPT_HOOKS+=("__shiftopt_hook__color")
__shiftopt_hook__color(){
case "$OPT" in
--no-color)OPT_COLOR=false
printc_init "$OPT_COLOR"
;;
--color){
case "$OPT_VAL" in
auto):;;
always|true)OPT_COLOR=true
printc_init "$OPT_COLOR"
;;
never|false)OPT_COLOR=false
printc_init "$OPT_COLOR"
esac
};;
*)return 1
esac
}
if [[ -z $OPT_COLOR ]];then
if [[ -t 1 ]];then
OPT_COLOR=true
else
OPT_COLOR=false
fi
printc_init "$OPT_COLOR"
fi
}
hook_pager(){
SHIFTOPT_HOOKS+=("__shiftopt_hook__pager")
__shiftopt_hook__pager(){
case "$OPT" in
--no-pager)shiftval
SCRIPT_PAGER_CMD=''
;;
--paging)shiftval
{
case "$OPT_VAL" in
auto):;;
never)SCRIPT_PAGER_CMD='';;
always):
esac
}
;;
--pager){
shiftval
SCRIPT_PAGER_CMD=($OPT_VAL)
PAGER_ARGS=()
};;
*)return 1
esac
}
}
printc(){
printf "$(sed "$_PRINTC_PATTERN" <<<"$1")" "${@:2}"
}
printc_init(){
case "$1" in
true)_PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI";;
false)_PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN";;
""){
_PRINTC_PATTERN_ANSI=""
_PRINTC_PATTERN_PLAIN=""
local name
local ansi
while read -r name ansi;do
if [[ -z $name && -z $ansi ]]||[[ ${name:0:1} == "#" ]];then
continue
fi
ansi="$(sed 's/\\/\\\\/' <<<"$ansi")"
_PRINTC_PATTERN_PLAIN="${_PRINTC_PATTERN_PLAIN}s/%{$name}//g;"
_PRINTC_PATTERN_ANSI="${_PRINTC_PATTERN_ANSI}s/%{$name}/$ansi/g;"
done
if [ -t 1 ];then
_PRINTC_PATTERN="$_PRINTC_PATTERN_ANSI"
else
_PRINTC_PATTERN="$_PRINTC_PATTERN_PLAIN"
fi
}
esac
}
print_warning(){
printc "%{YELLOW}[%s warning]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}
print_error(){
printc "%{RED}[%s error]%{CLEAR}: $1%{CLEAR}\n" "$PROGRAM" "${@:2}" 1>&2
}
printc_init <<END
	CLEAR	\x1B[0m
	RED		\x1B[31m
	GREEN	\x1B[32m
	YELLOW	\x1B[33m
	BLUE	\x1B[34m
	MAGENTA	\x1B[35m
	CYAN	\x1B[36m

	DIM		\x1B[2m
END
is_pager_less(){
[[ "$(pager_name)" == "less" ]]
return $?
}
is_pager_disabled(){
[[ -z "$(pager_name)" ]]
return $?
}
pager_name(){
if [[ -z ${SCRIPT_PAGER_CMD[0]} ]];then return;fi
if [[ -z $_SCRIPT_PAGER_NAME ]];then
local output="$("${SCRIPT_PAGER_CMD[0]}" --version 2>&1)"
if head -n 1 <<<"$output"|grep '^less \d' &>/dev/null;then
_SCRIPT_PAGER_NAME="less"
else
_SCRIPT_PAGER_NAME="$(basename "${SCRIPT_PAGER_CMD[0]}")"
fi
fi
echo "$_SCRIPT_PAGER_NAME"
}
pager_exec(){
if [[ -n $1 ]];then
if [[ -n $SCRIPT_PAGER_CMD ]];then
"$@"|"${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
return $?
else
"$@"
return $?
fi
fi
}
pager_display(){
if [[ -n $SCRIPT_PAGER_CMD ]];then
"${SCRIPT_PAGER_CMD[@]}" "${SCRIPT_PAGER_ARGS[@]}"
else
cat
fi
}
SCRIPT_PAGER_CMD=("$PAGER")
SCRIPT_PAGER_ARGS=()
if is_pager_less;then
SCRIPT_PAGER_ARGS=(-R)
fi
if [[ -n ${BAT_PAGER+x} ]];then
SCRIPT_PAGER_CMD=($BAT_PAGER)
SCRIPT_PAGER_ARGS=()
fi
if ! [[ -t 1 ]];then
SCRIPT_PAGER_CMD=()
SCRIPT_PAGER_ARGS=()
fi
hook_color
hook_pager
WATCHERS=("entr" "poll")
watcher_entr_watch(){
ENTR_ARGS=()
if [[ $OPT_CLEAR == "true" ]];then
ENTR_ARGS+=('-c')
fi
entr "${ENTR_ARGS[@]}" \
"$BAT" "${BAT_ARGS[@]}" \
--terminal-width="$TERM_WIDTH" \
--paging=never \
"$@" \
< <(printf "%s\n" "$@")
}
watcher_entr_supported(){
command -v entr &>/dev/null
return $?
}
POLL_STAT_VARIANT=''
POLL_STAT_COMMAND=()
determine_stat_variant(){
if [[ -n $POLL_STAT_VARIANT ]];then
return 0
fi
if stat -c '%z' "$0" &>/dev/null;then
POLL_STAT_COMMAND=(stat -c '%z')
POLL_STAT_VARIANT='gnu'
return 0
fi
if stat -f '%m' "$0" &>/dev/null;then
POLL_STAT_COMMAND=(stat -f '%m')
POLL_STAT_VARIANT='bsd'
return 0
fi
return 1
}
watcher_poll_watch(){
determine_stat_variant
local files=("$@")
local times=()
local file
local time
local modified=true
for file in "${files[@]}";do
time="$("${POLL_STAT_COMMAND[@]}" "$file")"
times+=("$time")
done
while true;do
if "$modified";then
modified=false
if [[ $OPT_CLEAR == "true" ]];then
clear
fi
"$BAT" "${BAT_ARGS[@]}" \
--terminal-width="$TERM_WIDTH" \
--paging=never \
"${files[@]}"
fi
local i=0
for file in "${files[@]}";do
time="$("${POLL_STAT_COMMAND[@]}" "$file")"
if [[ $time -ne ${times[$i]} ]];then
times[$i]="$time"
modified=true
fi
((i++))
done
sleep 1
done
"${POLL_STAT_COMMAND[@]}" "$@"
local ts
}
watcher_poll_supported(){
determine_stat_variant
return $?
}
determine_watcher(){
local watcher
for watcher in "${WATCHERS[@]}";do
if "watcher_${watcher}_supported";then
echo "$watcher"
return 0
fi
done
return 1
}
BAT_ARGS=()
FILES=()
FILES_HAS_DIRECTORY=false
OPT_CLEAR=true
OPT_WATCHER=""
TERM_WIDTH="$(tput cols)"
if [[ -t 1 ]];then
OPT_COLOR=true
fi
while shiftopt;do
case "$OPT" in
\
--watcher)shiftval
OPT_WATCHER="$OPT_VAL"
;;
--clear)OPT_CLEAR=true;;
--no-clear)OPT_CLEAR=false;;
--terminal-width)shiftval
TERM_WIDTH="$OPT_VAL"
;;
\
-*)BAT_ARGS+=("$OPT=$OPT_VAL");;
\
*){
FILES+=("$OPT")
}
esac
done
if [[ -z $FILES ]];then
print_error "no files provided"
exit 1
fi
for file in "${FILES[@]}";do
if ! [[ -e $file ]];then
print_error "'%s' does not exist" "$file"
exit 1
fi
if [[ -d $file ]];then
FILES_HAS_DIRECTORY=true
fi
done
if "$OPT_COLOR";then
BAT_ARGS+=("--color=always")
else
BAT_ARGS+=("--color=never")
fi
if [[ -z $OPT_WATCHER ]];then
OPT_WATCHER="$(determine_watcher)"
if [[ $? -ne 0 ]];then
print_error "Your system does not have any supported watchers."
printc "Please read the documentation at %{BLUE}%s%{CLEAR} for more details.\n" "$DOCS_URL/batwatch.md" 1>&2
exit 2
fi
else
if ! type "watcher_${OPT_WATCHER}_supported" &>/dev/null;then
print_error "Unknown watcher: '%s'" "$OPT_WATCHER"
exit 1
fi
if ! "watcher_${OPT_WATCHER}_supported" &>/dev/null;then
print_error "Unsupported watcher: '%s'" "$OPT_WATCHER"
exit 1
fi
fi
main(){
"watcher_${OPT_WATCHER}_watch" "${FILES[@]}"
return $?
}
pager_exec main
exit $?
